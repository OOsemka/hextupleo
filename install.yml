---
- name: install hextupleO
  hosts:
    - localhost
  vars_files:
    - vars/install-vars.yml

  tasks:

    - name: Get epel rpm
      get_url: url=https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm dest=/tmp/
      environment: "{{proxy_env}}"
    - name: uninstall any previous epels
      yum:
        name: epel-release
        state: absent
      environment: "{{proxy_env}}"

    - name: install epel
      shell: "yum -y install /tmp/epel-release-latest-7.noarch.rpm"
      environment: "{{proxy_env}}"

    - name: install pre-reqs
      yum: 
        name: "{{ item }}"
        state: latest
      with_items:
        - python-pip
        - python-wheel
        - ansible
        - gcc
        - python-devel
        - python-neutronclient
        - python-novaclient
        - python-openstackclient
        - wget
        - rhel-guest-image-7
        - libguestfs-tools
        - qemu-img
      environment: "{{proxy_env}}"

    - name: install shade libraries
      pip:
         name: shade
      environment: "{{proxy_env}}"

    - name: install http and php if custom webform picked
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - httpd
        - php
      when: deployment_type == "http"

    - name: install ansible-tower-cli for tower support
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - python2-ansible-tower-cli
      when: deployment_type == "tower"



    - name: start and enable http service
      service:
        name: httpd
        enabled: yes
        state: started
      when: deployment_type == "http"

    - name: enable http port on local firewall
      firewalld:
        service: http
        permanent: true
        state: enabled
        immediate: true
      when: deployment_type == "http"
      tags:
        - firewalld

    - name: set selinux to permissive
      selinux:
         policy: targeted
         state: permissive
      when: deployment_type == "http"


    - name: grant permission to /usr/share/httpd/ for apache user
      acl:
        path: /usr/share/httpd/
        entity: apache
        etype: user
        permissions: rwx
        state: present
      when: deployment_type == "http"
      tags:
        - acl

    - name: copy .id_rsa from local user to httpd home directory
      copy:
        src: ~/.ssh/id_rsa
        dest: /usr/share/httpd/.ssh/
        owner: apache
        group: apache
        mode: 0600
      when: deployment_type == "http"
      tags:
        - id_rsa_http


    - name: copy .id_rsa from local user to awx home directory
      copy:
        src: ~/.ssh/id_rsa
        dest: /var/lib/awx/.ssh/
        owner: awx
        group: awx
        mode: 0600
      when: deployment_type == "tower"
      tags:
        - id_rsa_tower




    - name: convert rhel7 qcow2 to raw to get better performance with ceph
      shell: "qemu-img  convert /usr/share/rhel-guest-image-7/rhel-guest-image*.qcow2 /tmp/rhel7.raw"
    - name: download pxeboot.img
      get_url: url=https://github.com/OOsemka/hextupleo/raw/master/pxeboot.img dest=/tmp/pxeboot.img
      environment: "{{proxy_env}}"
    - name: upload images to OpenStack - pxeboot.img
      os_image:
        auth:
          auth_url: "{{ os_auth }}"
          username: "{{ cloud_admin }}"
          password: "{{ admin_password }}"
          project_name: "{{ admin_project }}"
        name: pxeboot
        container_format: bare
        disk_format: qcow2
        state: present
        is_public: yes
        filename: /tmp/pxeboot.img
        validate_certs: False
      environment: "{{shade_env}}"

    - name: upload images to OpenStack- rhel7
      os_image:
        auth:  
          auth_url: "{{ os_auth }}"
          username: "{{ cloud_admin }}"
          password: "{{ admin_password }}"
          project_name: "{{ admin_project }}"
        name: rhel7-pre
        container_format: bare
        disk_format: raw
        state: present
        filename: /tmp/rhel7.raw
        validate_certs: False
      environment: "{{shade_env}}"

    - name: create nova flavors
      os_nova_flavor:
        auth: 
          auth_url: "{{ os_auth }}"
          username: "{{ cloud_admin }}"
          password: "{{ admin_password }}"
          project_name: "{{ admin_project }}"
        name: "{{ item.value.name }}"
        state: present
        ram: "{{ item.value.ram }}"
        vcpus: "{{ item.value.vcpu }}"
        disk: "{{ item.value.disk }}"
        validate_certs: False
      with_dict: "{{ flavors }}"
      environment: "{{shade_env}}"

    - name: create repo files from templates - osp9
      template:
        src: templates/osp9.j2
        dest: files/osp9/osp9.repo
    - name: create repo files from templates - osp10
      template:
        src: templates/osp10.j2
        dest: files/osp10/osp10.repo
    - name: create repo files from templates - osp11
      template:
        src: templates/osp11.j2
        dest: files/osp11/osp11.repo
    - name: create repo files from templates - osp12
      template:
        src: templates/osp12.j2
        dest: files/osp12/osp12.repo
    - name: create static variable file
      template:
        src: templates/static-variables.j2
        dest: roles/001-include-vars/vars/openstack-static.yml

    - name: copy id_rsa.pub to local files directory
      copy:
        src: ~/.ssh/id_rsa.pub
        dest: files/id_rsa.pub

    - name: create directory for http webform
      file:
        path: /var/www/html/hextupleO
        state: directory
        mode: 0755
        owner: apache
        group: apache
      when: deployment_type == "http"


    - name: for custom http webform copy the hextupleO to /var/www/html
      copy:
        src: ../
        dest: /var/www/html/hextupleO/
        owner: apache
        group: apache
        #directory_mode: yes
      when: deployment_type == "http"
      tags:
         - httpcopy

    - name: create directory for awx
      file:
        path: /var/lib/awx/projects/hextupleO
        state: directory
        mode: 0755
        owner: awx
        group: awx
      when: deployment_type == "tower"


    - name: for Tower deployment - copy the hextupleO to /var/lib/awx/projects/hextupleO
      copy:
        src: ../
        dest: /var/lib/awx/projects/hextupleO/
        owner: awx
        group: awx
        #directory_mode: yes
      when: deployment_type == "tower"


    - name: Create tower organization
      tower_organization:
         name: "HextupleO"
         description: "for HextupleO project"
         state: present
         tower_config_file: "vars/tower_cli.cfg"
      when: deployment_type == "tower"
      tags:
        - tower



    - name: Add tower project for HextupleO
      tower_project:
         name: "HextupleO"
         description: "Nested OpenStack"
         organization: "HextupleO"
         state: present
         scm_type: manual
         local_path: hextupleO
         #scm_branch: hextupleO
         scm_url: /var/lib/awx/projects
         tower_config_file: "vars/tower_cli.cfg"
      when: deployment_type == "tower"
      tags:
        - tower

    - name: Add tower credential for user awx
      tower_credential:
         name: awx
         description: awx user
         organization: "HextupleO"
         kind: ssh
         ssh_key_data: ~/.ssh/id_rsa
         state: present
         tower_config_file: "vars/tower_cli.cfg"
      when: deployment_type == "tower"
      tags:
        - tower


    - name: Create tower HextupleO-build job template
      tower_job_template:
        name: htplO-build-all
        job_type: run
        inventory: "Demo Inventory"
        project: HextupleO
        playbook: htplO-build-all.yml
        machine_credential: awx
        ask_extra_vars: true
        extra_vars_path: deploy-vars.yml
        state: present
        tower_config_file: "vars/tower_cli.cfg"
      when: deployment_type == "tower"
      tags:
        - tower


    - name: Create tower HextupleO-destroy job template
      tower_job_template:
        name: htplO-destroy-all
        job_type: run
        inventory: "Demo Inventory"
        project: HextupleO
        playbook: htplO-destroy-all.yml
        machine_credential: awx
        ask_extra_vars: true
        extra_vars_path: deploy-vars.yml
        state: present
        tower_config_file: "vars/tower_cli.cfg"
      when: deployment_type == "tower"
      tags:
        - tower



    - name: upload keypair for ansible server
      os_keypair:
         auth:
           auth_url: "{{ os_auth }}"
           username: "{{ cloud_admin }}"
           password: "{{ admin_password }}"
           project_name: "{{ admin_project }}"
         state: present
         name: ansible
         validate_certs: False
         public_key_file: files/id_rsa.pub
      environment: "{{shade_env}}"

    - name: Create security group to allow ssh traffic
      os_security_group:
         auth:
           auth_url: "{{ os_auth }}"
           username: "{{ cloud_admin }}"
           password: "{{ admin_password }}"
           project_name: "{{ admin_project }}"
         state: present
         name: rhel7-pre
         description: security group for building updated rhel7
         validate_certs: False
      environment: "{{shade_env}}"

    - name: Add rules to enable ssh port
      os_security_group_rule:
         auth:
           auth_url: "{{ os_auth }}"
           username: "{{ cloud_admin }}"
           password: "{{ admin_password }}"
           project_name: "{{ admin_project }}"
         security_group: rhel7-pre
         protocol: tcp
         port_range_min: 22
         port_range_max: 22
         remote_ip_prefix: 0.0.0.0/0
         validate_certs: False
      environment: "{{shade_env}}"

    - name: deploy vanilla rhel7
      os_server:
         auth:
           auth_url: "{{ os_auth }}"
           username: "{{ cloud_admin }}"
           password: "{{ admin_password }}"
           project_name: "{{ admin_project }}"
         state: present
         name: rhel7-pre
         image: rhel7-pre
         key_name: ansible
         #timeout: 200
         flavor: rhel-small
         auto_ip: no
         security_groups: rhel7-pre
         validate_certs: False
         nics:
           - net-name: "{{ external_net }}"
      register: rhel7pre
      environment: "{{shade_env}}"

    - name: add rhel7-pre to ansible inventory
      add_host:
         name: rhel7pre
         groups: openstack
         ansible_host: "{{rhel7pre.openstack.accessIPv4}}"
         ansible_user: cloud-user
         ansible_become: true

    - name: Make sure rhel7-pre is started (if already created)
      shell: >
         openstack --os-auth-url "{{ os_auth }}" --os-project-name "{{ admin_project }}"
         --os-username "{{ cloud_admin }}" --os-password "{{ admin_password }}"
         --insecure server start rhel7-pre
      ignore_errors: true

    - name: verify rhel7-pre is up and reachable
      command: >
        ssh -o BatchMode=yes -o StrictHostKeyChecking=no
        cloud-user@{{rhel7pre.openstack.accessIPv4}} true
      register: result
      until: result|success
      retries: 40
      delay: 5



- name: create rhel7-updated
  hosts: rhel7pre
  tasks:

    - name: upload yum repo file to image
      copy: src=files/osp11/osp11.repo dest=/etc/yum.repos.d/
      become: yes


    - name: upgrade all packages - this might take a while ( when 'update_guest_packages' is 'true' )
      yum: name="*" state=latest
      become: yes
      when: update_guest_packages | bool
    - name: install tools
      yum: name="{{ item }}" state=latest
      become: yes
      with_items:
        - libvirt
        - wget
        - telnet
        - xauth
        - libguestfs-tools
        - git
        - vim-enhanced
        - screen
        - bash-completion
        - mlocate

    - name: remove repo file
      file:
        path: /etc/yum.repos.d/osp11.repo
        state: absent

    - name: Restart server
      command: /sbin/shutdown -r +1
      async: 0
      poll: 0
      ignore_errors: true

- name: snapshot rhel7-pre to rhel7-updated
  hosts:
    - localhost
  vars_files:
    - vars/install-vars.yml

    - name: verify rhel7pre rebooted after yum update
      command: >
        ssh -o BatchMode=yes -o StrictHostKeyChecking=no
        cloud-user@{{rhel7pre.openstack.accessIPv4}} true
      register: result
      until: result|success
      retries: 20
      delay: 10

    - name: stop updated rhel7
      os_server_actions:
        auth:
          auth_url: "{{ os_auth }}"
          username: "{{ cloud_admin }}"
          password: "{{ admin_password }}"
          project_name: "{{ admin_project }}"
        server: rhel7-pre
        action: stop
        #timeout: 200
        validate_certs: False
      environment: "{{shade_env}}"

    - name: remove previous rhel7-updated image
      shell: openstack --os-auth-url "{{ os_auth }}" --os-project-name "{{ admin_project }}" --os-username "{{ cloud_admin }}" --os-password "{{ admin_password }}" --insecure image delete rhel7-updated
      environment: "{{shade_env}}"
      ignore_errors: true

    - name: take a snapshot of the updated rhel7
      shell: openstack --os-auth-url "{{ os_auth }}" --os-project-name "{{ admin_project }}" --os-username "{{ cloud_admin }}" --os-password "{{ admin_password }}" --insecure server image create --name rhel7-updated rhel7-pre

    - name: unfortunately there is no easy way to confirm snapshot has completed before making image public, so waiting 3 minutes
      pause:
        minutes: 3

    - name: make a new rhel7-updated image public
      shell: openstack --os-auth-url "{{ os_auth }}" --os-project-name "{{ admin_project }}" --os-username "{{ cloud_admin }}" --os-password "{{ admin_password }}" --insecure image set --public rhel7-updated
      environment: "{{shade_env}}"
