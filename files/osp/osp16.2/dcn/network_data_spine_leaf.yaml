# List of networks, used for j2 templating of routed networks
#
# Supported values:
#
# name: Name of the network (mandatory)
# name_lower: lowercase version of name used for filenames
#             (optional, defaults to name.lower())
# service_net_map_replace: if name_lower is set to a custom name this should be set
#             to original default (optional).  This field is only necessary when
#             changing the default network names, not when adding a new custom network.
# enabled: Is the network enabled (optional, defaults to true)
# NOTE: False will use noop.yaml for unused legacy networks to support upgrades.
# vlan: vlan for the network (optional)
# vip: Enable creation of a virtual IP on this network
# ip_subnet: IP/CIDR, e.g. '192.168.24.0/24' or '2001:db8:fd00:1000::/64'
#            (optional, may use parameter defaults instead)
# allocation_pools: IP range list e.g. [{'start':'10.0.0.4', 'end':'10.0.0.250'}]
# gateway_ip: gateway for the network (optional, may use parameter defaults)
# routes: Optional, list of networks that should be routed via network gateway.
#         Example: [{'destination':'10.0.0.0/16', 'nexthop':'10.0.0.1'}]
#         A single /16 supernet route could be used for 255 smaller /24 subnets.
# ipv6_subnet: Optional, sets default IPv6 subnet if IPv4 is already defined.
# ipv6_allocation_pools: Set default IPv6 allocation pools if IPv4 allocation pools
#                        are already defined.
# ipv6_gateway: Set an IPv6 gateway if IPv4 gateway already defined.
# routes_ipv6: Optional, list of networks that should be routed via network gateway.
#              Example: [{'destination':'fd00:fd00:fd00:3004::/64',
#                         'nexthop':'fd00:fd00:fd00:3000::1'}]
# ipv6: If ip_subnet not defined, this specifies that the network is IPv6-only.
# NOTE: IP-related values set parameter defaults in templates, may be overridden,
# either by operators, or e.g in environments/network-isolation-v6.yaml where we
# set some default IPv6 addresses.
# compat_name: for existing stack you may need to override the default
#              transformation for the resource's name.
# subnets: A map of additional subnets for the network (optional). The map
#          takes the following format:
#              {'<subnet name>': {'enabled': '<true|false>',
#                                 'vlan': '<vlan-id>',
#                                 'ip_subnet': '<IP/CIDR>',
#                                 'allocation_pools': '<IP range list>',
#                                 'gateway_ip': '<gateway IP>',
#                                 'routes': '<Routes list>',
#                                 'ipv6_subnet': '<IPv6/CIDR>',
#                                 'ipv6_allocation_pools': '<IPv6 range list>',
#                                 'gateway_ipv6': '<IPv6 gateway>',
#                                 'routes_ipv6': '<Routes list>'}}
#
# Example:
# - name Example
#   vip: false
#   ip_subnet: '10.0.2.0/24'
#   allocation_pools: [{'start': '10.0.2.4', 'end': '10.0.2.250'}]
#   gateway_ip: '10.0.2.254'
#   subnets:
#     example_siteB_rack1:
#       vlan: 11
#       ip_subnet:  '172.16.1.64/26'
#       allocation_pools: [{'start': '172.16.1.70', 'end': '172.16.1.110'}]
#       gateway_ip: '172.16.1.65'
#
# To support backward compatility, two versions of the network definitions will
# be created, network/<network>.yaml and network/<network>_v6.yaml. Only
# one of these files may be used in the deployment at a time, since the
# parameters used for configuration are the same in both files. In the
# future, this behavior may be changed to create only one file for custom
# networks. You may specify IPv6 addresses for ip_subnet, allocation_pools,
# and gateway_ip if no IPv4 addresses are used for a custom network, or set
# ipv6: true, and the network/<network>.yaml file will be configured as IPv6.
#
# For configuring both IPv4 and IPv6 on the same interface, use two separate
# networks, and then assign both IPs to the same interface in a custom NIC
# configuration templates.
#
# The ordering of the networks below will determine the order in which NICs
# are assigned in the network/config/multiple-nics templates, beginning with
# NIC2, Control Plane is always NIC1.

- name: External
  vip: true
  name_lower: external
  ip_subnet: '10.1.0.0/24'
  allocation_pools: [{'start': '10.1.0.90', 'end': '10.1.0.99'}]
  gateway_ip: '10.1.0.11'
- name: InternalApi
  name_lower: internal_api
  vip: true
  ip_subnet: '10.20.0.0/24'
  allocation_pools: [{'start': '10.20.0.20', 'end': '10.20.0.199'}]
  gateway_ip: '10.20.0.1'
  subnets:
    internal_api_leaf1:
      ip_subnet: '10.20.1.0/24'
      allocation_pools: [{'start': '10.20.1.20', 'end': '10.20.1.199'}]
      gateway_ip: '10.20.1.1'
    internal_api_leaf2:
      ip_subnet: '10.20.2.0/24'
      allocation_pools: [{'start': '10.20.2.20', 'end': '10.20.2.199'}]
      gateway_ip: '10.20.2.1'
- name: Storage
  vip: true
  name_lower: storage
  ip_subnet: '10.40.0.0/24'
  allocation_pools: [{'start': '10.40.0.20', 'end': '10.40.0.199'}]
  gateway_ip: '10.40.0.1'
  subnets:
    storage_leaf1:
      ip_subnet: '10.40.1.0/24'
      allocation_pools: [{'start': '10.40.1.20', 'end': '10.40.1.199'}]
      gateway_ip: '10.40.1.1'
    storage_leaf2:
      ip_subnet: '10.40.2.0/24'
      allocation_pools: [{'start': '10.40.2.20', 'end': '10.40.2.199'}]
      gateway_ip: '10.40.2.1'
- name: StorageMgmt
  name_lower: storage_mgmt
  vip: true
  ip_subnet: '10.50.0.0/24'
  allocation_pools: [{'start': '10.50.0.20', 'end': '10.50.0.199'}]
  gateway_ip: '10.50.0.1'
  subnets:
    storage_mgmt_leaf1:
      ip_subnet: '10.50.1.0/24'
      allocation_pools: [{'start': '10.50.1.20', 'end': '10.50.1.199'}]
      gateway_ip: '10.50.1.1'
    storage_mgmt_leaf2:
      ip_subnet: '10.50.2.0/24'
      allocation_pools: [{'start': '10.50.2.20', 'end': '10.50.2.199'}]
      gateway_ip: '10.50.2.1'
- name: Tenant
  vip: false  # Tenant network does not use VIPs
  name_lower: tenant
  ip_subnet: '10.30.0.0/24'
  allocation_pools: [{'start': '10.30.0.20', 'end': '10.30.0.199'}]
  gateway_ip: '10.30.0.1'
  # Note that tenant tunneling is only compatible with IPv4 addressing at this time.
  subnets:
    tenant_leaf1:
      ip_subnet: '10.30.1.0/24'
      allocation_pools: [{'start': '10.30.1.20', 'end': '10.30.1.199'}]
      gateway_ip: '10.30.1.1'
    tenant_leaf2:
      ip_subnet: '10.30.2.0/24'
      allocation_pools: [{'start': '10.30.2.20', 'end': '10.30.2.199'}]
      gateway_ip: '10.30.2.1'
