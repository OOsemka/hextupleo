---
- name: deploy virtual ipmi instances
  os_server:
     auth: "{{ os_auth_tenant }}"
     state: "{{ state }}"
     name: "ipmi_{{ item.name }}"
     image: virtualipmi
     key_name: hextupleo_pub_key
     flavor: t1.micro
     auto_ip: no
     validate_certs: False
     nics:
       - net-name: virtualipmi
     userdata: |
       {%- raw -%}#!/bin/bash

       # Creating Python program for fake Openstack BMC
       cat <<EOF > /usr/lib/python2.7/site-packages/pyghmi/cmd/ospbmc.py
       import argparse
       import sys
       import openstack
       
       import pyghmi.ipmi.bmc as bmc
       
       class OpenStackBmc(bmc.Bmc):
           def __init__(self, authdata, port):
               super(OpenStackBmc, self).__init__(authdata, port)
               self.powerstate = 'off'
               self.bootdevice = 'default'
               self.conn = osp_connect(cloud_name = "{% endraw -%}{{ project_name }}{%- raw -%}")
               self.server_name = "{% endraw -%}{{ item.name }}{%- raw -%}"
               self.server_instance = get_server(self.server_name)
               self.image_name = "pxeboot"
               self.image = get_image(self.image_name)
       
           def get_boot_device(self):
               return self.bootdevice
       
           def set_boot_device(self, bootdevice):
               print "setting bootdevice"
               print bootdevice
               if "network" in bootdevice:
                  print "pxe boot selected"
                  self.conn.compute.rebuild_server(self.server_instance.id, self.server_name, self.server_name, image=self.image)
               else:
                  self.bootdevice = bootdevice
       
           def cold_reset(self):
               # Reset of the BMC, not managed system, here we will exit the demo
               print('shutting down in response to BMC cold reset request')
               sys.exit(0)
       
           def get_power_state(self):
               self.server_instance = get_server(self.server_name)
               if "ACTIVE" in self.server_instance.status:
                  print "Power status is on"
                  self.powerstate = 'on'
               else:
                  print "Power status is not on"
                  self.powerstate = 'off'
               return self.powerstate
       
           def power_off(self):
               self.server_instance = get_server(self.server_name)
               if "ACTIVE" in self.server_instance.status:
                  print "System is in Running state"
                  # this should be power down without waiting for clean shutdown
                  self.conn.compute.stop_server(self.server_instance.id)
                  self.powerstate = 'off'
                  print('abruptly remove power')
               else:
                  self.powerstate = 'off'
                  print('abruptly remove power')
       
           def power_on(self):
               self.conn.compute.start_server(self.server_instance.id)
       
               self.powerstate = 'on'
               print('powered on')
       
           def power_reset(self):
               pass
       
           def power_shutdown(self):
               # should attempt a clean shutdown
               print('politely shut down the system')
               self.powerstate = 'off'
       
           def is_active(self):
               return self.powerstate == 'on'
       
           def iohandler(self, data):
               print(data)
               if self.sol:
                   self.sol.send_data(data)
       
       def get_server(server_name):
           cloud_name = "{% endraw -%}{{ project_name }}{%- raw -%}"
           conn = openstack.connect(cloud=cloud_name)
           server_instance = conn.compute.find_server(server_name, True)
           return conn.compute.get_server(server_instance.id)
       
       def get_image(image_name):
           cloud_name = "{% endraw -%}{{ project_name }}{%- raw -%}"
           conn = openstack.connect(cloud=cloud_name)
           image = conn.compute.find_image(image_name)
           return image.id
       
       
       def osp_connect(cloud_name):
           conn = openstack.connect(cloud=cloud_name)
           return conn
       
       def main():
           parser = argparse.ArgumentParser(
               prog='fakebmc',
               description='Pretend to be a BMC',
           )
           parser.add_argument('--port',
                               dest='port',
                               type=int,
                               default=623,
                               help='Port to listen on; defaults to 623')
           args = parser.parse_args()
           print("starting")
           mybmc = OpenStackBmc({'{% endraw -%}{{ project_name }}{%- raw -%}': '{% endraw -%}{{ project_password }}{%- raw -%}'}, port=args.port)
           mybmc.listen()
       
       
       if __name__ == '__main__':
           sys.exit(main())
       EOF


       #Creating Openstack Credentials cloud file
       mkdir -p /root/.config/openstack/
       cat <<EOF > /root/.config/openstack/clouds.yaml
       clouds:
         {% endraw -%}{{ project_name }}{%- raw -%}:
           auth:
             auth_url: '{% endraw -%}{{ clouds.devstack.auth.auth_url }}{%- raw -%}'
             password: '{% endraw -%}{{ project_password }}{%- raw -%}'
             project_domain_name: '{% endraw -%}{{ clouds.devstack.auth.domain_name }}{%- raw -%}'
             project_name: '{% endraw -%}{{ project_name }}{%- raw -%}'
             user_domain_name: '{% endraw -%}{{ clouds.devstack.auth.domain_name }}{%- raw -%}'
             username: '{% endraw -%}{{ project_name }}{%- raw -%}'
           cacert: '/root/cloud-cert.crt.pem'
           identity_api_version: '3'
           region_name: regionOne
       EOF
       cat <<EOF > /root/cloud-cert.crt.pem
       #Cert for the OpenStack

       {% endraw -%}{{ cloud_cert }}{%- raw %}
        
       #End of Cert 
       EOF
       
       # Creating service for openstack bmc
       cat <<EOF > /usr/lib/systemd/system/ospbmc.service
       [Unit]
       Description=OpenStackBMC startup
       
       [Service]
       Type=simple
       ExecStart=/usr/bin/ospbmc
       
       [Install]
       WantedBy=multi-user.target
       EOF

       cat <<EOF > /usr/bin/ospbmc
       #!/bin/python
       
       import sys
       
       from pyghmi.cmd.ospbmc import main
       
       
       if __name__ == "__main__":
           sys.exit(main())
       EOF
       
       sudo chmod 755 /usr/bin/ospbmc
       sudo chown root:root /usr/lib/systemd/system/ospbmc.service
       sudo chmod 644 /usr/lib/systemd/system/ospbmc.service
       sudo systemctl enable ospbmc
       sudo systemctl start ospbmc
       {% endraw -%}
  with_items: 
    - "{{ instances }}"
  ignore_errors: True
  when: item.ipmi == "True"
  register: virtual_ipmi_instances
  tags:
     - instances

