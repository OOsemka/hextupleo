---
#this needs work
- name: deploy virtual ipmi instances
  os_server:
     auth: "{{ os_auth_tenant }}"
     state: "{{ state }}"
     name: "ipmi_{{ item.name }}"
     image: virtualipmi
     key_name: hextupleo_pub_key
     flavor: t1.micro
     auto_ip: no
     validate_certs: False
     nics:
       - net-name: virtualipmi
     userdata: |
       {%- raw -%}#!/bin/bash
       cat <<EOF > /usr/lib/python2.7/site-packages/pyghmi/cmd/fakebmc.py
       # Copyright 2015 Lenovo
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #     http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       
       """this is a quick sample of how to write something that acts like a bmc
       to play:
       run fakebmc
       # ipmitool -I lanplus -U admin -P password -H 127.0.0.1 power status
       Chassis Power is off
       # ipmitool -I lanplus -U admin -P password -H 127.0.0.1 power on
       Chassis Power Control: Up/On
       # ipmitool -I lanplus -U admin -P password -H 127.0.0.1 power status
       Chassis Power is on
       # ipmitool -I lanplus -U admin -P password -H 127.0.0.1 mc reset cold
       Sent cold reset command to MC
       (fakebmc exits)
       """
       
       import argparse
       import sys
       import subprocess
       import os
       
       import pyghmi.ipmi.bmc as bmc
       
       
       class FakeBmc(bmc.Bmc):
           def __init__(self, authdata, port):
               super(FakeBmc, self).__init__(authdata, port)
               self.powerstate = 'off'
               self.bootdevice = 'default'
       
           def get_boot_device(self):
               return self.bootdevice
       
           def set_boot_device(self, bootdevice):
               print "setting bootdevice"
               print bootdevice
               if "network" in bootdevice:
                  print "pxe boot selected"
                  os.system('openstack --os-auth-url "{% endraw -%}{{ clouds.devstack.auth.auth_url }}{%- raw -%}" --os-project-name "{% endraw -%}{{ project_name }}{%- raw -%}" --os-project-domain-id  "{% endraw -%}{{ clouds.devstack.auth.domain_name }}{%- raw -%}" --os-identity-api-version "3" --os-username "{% endraw -%}{{ project_name }}{%- raw -%}" --os-password "{% endraw -%}{{ project_password }}{%- raw -%}" --insecure server rebuild --image pxeboot "{% endraw -%}{{ item.name }}{%- raw -%}" ')
               else:
                  self.bootdevice = bootdevice
       
           def cold_reset(self):
               # Reset of the BMC, not managed system, here we will exit the demo
               print('shutting down in response to BMC cold reset request')
               sys.exit(0)
       
           def get_power_state(self):
               output_test = subprocess.check_output('openstack --os-auth-url "{% endraw -%}{{ clouds.devstack.auth.auth_url }}{%- raw -%}" --os-project-name "{% endraw -%}{{ project_name }}{%- raw -%}" --os-project-domain-id  "{% endraw -%}{{ clouds.devstack.auth.domain_name }}{%- raw -%}" --os-identity-api-version "3" --os-username "{% endraw -%}{{ project_name }}{%- raw -%}" --os-password "{% endraw -%}{{ project_password }}{%- raw -%}" --insecure server show "{% endraw -%}{{ item.name }}{%- raw -%}" | grep power_state', shell=True)
               #print output_test
               if "Running" in output_test:
                  print "Power status is on"
                  self.powerstate = 'on'
               else:
                  print "Power status is not on"
                  self.powerstate = 'off'
               return self.powerstate
       
           def power_off(self):
               output_test = subprocess.check_output('openstack --os-auth-url "{% endraw -%}{{ clouds.devstack.auth.auth_url }}{%- raw -%}" --os-project-name "{% endraw -%}{{ project_name }}{%- raw -%}" --os-project-domain-id  "{% endraw -%}{{ clouds.devstack.auth.domain_name }}{%- raw -%}" --os-identity-api-version "3" --os-username "{% endraw -%}{{ project_name }}{%- raw -%}" --os-password "{% endraw -%}{{ project_password }}{%- raw -%}" --insecure server show "{% endraw -%}{{ item.name }}{%- raw -%}" | grep power_state', shell=True)
               if "Running" in output_test:
                  print "System is in Running state"
                  # this should be power down without waiting for clean shutdown
                  os.system('openstack --os-auth-url  "{% endraw -%}{{ clouds.devstack.auth.auth_url }}{%- raw -%}"  --os-project-name  "{% endraw -%}{{ project_name }}{%- raw -%}"  --os-project-domain-id  "{% endraw -%}{{ clouds.devstack.auth.domain_name }}{%- raw -%}"  --os-identity-api-version "3" --os-username  "{% endraw -%}{{ project_name }}{%- raw -%}"  --os-password  "{% endraw -%}{{ project_password }}{%- raw -%}"  --insecure server stop  "{% endraw -%}{{ item.name }}{%- raw -%}"')
                  self.powerstate = 'off'
                  print('abruptly remove power')
               else:
                  self.powerstate = 'off'
                  print('abruptly remove power')
           def power_on(self):
               os.system('openstack --os-auth-url "{% endraw -%}{{ clouds.devstack.auth.auth_url }}{%- raw -%}" --os-project-name "{% endraw -%}{{ project_name }}{%- raw -%}" --os-project-domain-id  "{% endraw -%}{{ clouds.devstack.auth.domain_name }}{%- raw -%}" --os-identity-api-version "3" --os-username "{% endraw -%}{{ project_name }}{%- raw -%}" --os-password "{% endraw -%}{{ project_password }}{%- raw -%}"  --insecure server start "{% endraw -%}{{ item.name }}{%- raw -%}"')
               self.powerstate = 'on'
               print('powered on')
       
           def power_reset(self):
               pass
       
           def power_shutdown(self):
               # should attempt a clean shutdown
               print('politely shut down the system')
               self.powerstate = 'off'

           def is_active(self):
               return self.powerstate == 'on'
       
           def iohandler(self, data):
               print(data)
               if self.sol:
                   self.sol.send_data(data)
       
       
       def main():
           parser = argparse.ArgumentParser(
               prog='fakebmc',
               description='Pretend to be a BMC',
           )
           parser.add_argument('--port',
                               dest='port',
                               type=int,
                               default=623,
                               help='Port to listen on; defaults to 623')
           args = parser.parse_args()
           mybmc = FakeBmc({'{% endraw -%}{{ project_name }}{%- raw -%}': '{% endraw -%}{{ project_password }}{%- raw -%}'}, port=args.port)
           mybmc.listen()
       
       
       if __name__ == '__main__':
           sys.exit(main())
       EOF
       cat <<EOF > /usr/lib/systemd/system/fakebmc.service
       [Unit]
       Description=FakeBMC startup
       
       [Service]
       Type=simple
       ExecStart=/usr/bin/fakebmc
       
       [Install]
       WantedBy=multi-user.target
       EOF
       sudo chown root:root /usr/lib/systemd/system/fakebmc.service
       sudo chmod 644 /usr/lib/systemd/system/fakebmc.service
       sudo systemctl enable fakebmc
       sudo systemctl start fakebmc
       {% endraw -%}
  with_items: 
    - "{{ instances }}"
  ignore_errors: True
  when: item.ipmi == "True"
  register: virtual_ipmi_instances
  tags:
     - instances

