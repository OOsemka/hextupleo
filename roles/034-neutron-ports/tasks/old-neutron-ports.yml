---
# Create Provisioning Ports and disable security - this is super ugly but I still need to find a better way to do it.
###########################################
# undercloud
############

  - name: create pxe port for undercloud
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: pxe-undercloud
       network: "{{ network_pxe }}"
       no_security_groups: True
       validate_certs: False

  - name: disable security on provisioning nic for undercloud
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update pxe-undercloud --port-security-enabled=False

# controller
############

## pxe

  - name: create pxe port for controllers
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: pxe-controller{{ item }}
       network: "{{ network_pxe }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ controller_count }}"



  - name: disable security on provisioning nic for controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update pxe-controller"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ controller_count }}"


## internal api


  - name: create internalapi port for controllers
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: intapi-controller{{ item }}
       network: "{{ network_intapi }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ controller_count }}"



  - name: disable security on internalapi nic for controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update intapi-controller"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ controller_count }}"

## tenant


  - name: create tenant port for controllers
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: tenant-controller{{ item }}
       network: "{{ network_tenant }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ controller_count }}"



  - name: disable security on tenant nic for controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update tenant-controller"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ controller_count }}"

## storage


  - name: create storage port for controllers
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}" 
       state: present
       name: storage-controller{{ item }}
       network: "{{ network_storage }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ controller_count }}"



  - name: disable security on storage nic for controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update storage-controller"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ controller_count }}"


## storage mgmt

  - name: create storagemgmt port for controllers
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}" 
       state: present
       name: storagemgmt-controller{{ item }}
       network: "{{ network_storagemgmt }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ controller_count }}"



  - name: disable security on storagemgmt nic for controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update storagemgmt-controller"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ controller_count }}"


## external

  - name: create external port for controllers
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}" 
       state: present
       name: "{{ project_name }}-external-controller{{ item }}"
       network: "{{ network_external }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ controller_count }}"



  - name: disable security on external nic for controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ cloud_admin }}" --os-username "{{ cloud_admin }}" --os-password "{{ admin_password }}" --insecure port-update {{ project_name }}-external-controller"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ controller_count }}"





# Create instackenv.json file to be used by project - Controller
###############################################
  
  - name: make sure old instackenv.json is not there
    file:
      path: files/instackenv/{{ project_name }}instackenv.json
      state: absent

  
  - name: start creating instackenv.json file for the project 
    blockinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      create: yes
      block: |
        {
            "nodes":[

  - name: gather mac addresses for provisioning nic - controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-show pxe-controller"{{ item }}" | grep mac_address | awk {'print $4'}
    register: maccontrollers
    with_sequence:
       count="{{ controller_count }}"



  - name: append controller info
    blockinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      insertafter: EOF
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.stdout }}"
      block: |
        # controller{{ item.item }}
                {    
                    "mac":[
                        "{{ item.stdout }}"
                    ],
                    "cpu":"2",
                    "memory":"4096",
                    "disk":"40",
                    "arch":"x86_64",
                    "pm_type":"pxe_ipmitool",
                    "name":"controller{{ item.item }}",
                    "capabilities": "profile:control",
                    "pm_user":"{{ project_name }}",
                    "pm_password":"{{ project_password }}",
                    "pm_addr":"{{ os_auth }}/controller{{ item.item }}"
        
                },
    with_items: "{{ maccontrollers.results }}"





# compute
############

## pxe

  - name: create pxe port for compute
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: pxe-compute{{ item }}
       network: "{{ network_pxe }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ compute_count }}"


  - name: disable security on provisioning nic for compute
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update pxe-compute"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ compute_count }}"

## internal api 

  - name: create internal api port for compute
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: intapi-compute{{ item }}
       network: "{{ network_intapi }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ compute_count }}"


  - name: disable security on Internal API nic for compute
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update intapi-compute"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ compute_count }}"


## tenant


  - name: create tenant port for compute
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: tenant-compute{{ item }}
       network: "{{ network_tenant }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ compute_count }}"


  - name: disable security on tenant nic for compute
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update tenant-compute"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ compute_count }}"


## storage

  - name: create storage port for compute
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: storage-compute{{ item }}
       network: "{{ network_storage }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ compute_count }}"


  - name: disable security on storage nic for compute
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update storage-compute"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ compute_count }}"




# Create instackenv.json file to be used by project - Compute
###############################################



  - name: gather mac addresses for provisioning nic - computes
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-show pxe-compute"{{ item }}" | grep mac_address | awk {'print $4'}
    register: maccompute
    with_sequence:
       count="{{ compute_count }}"



  - name: append compute info
    blockinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      insertafter: EOF
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.stdout }}"
      block: |
        # compute{{ item.item }}
                {
                    "mac":[
                        "{{ item.stdout }}"
                    ],
                    "cpu":"2",
                    "memory":"4096",
                    "disk":"40",
                    "arch":"x86_64",
                    "pm_type":"pxe_ipmitool",
                    "name":"compute{{ item.item }}",
                    "capabilities": "profile:compute",
                    "pm_user":"{{ project_name }}",
                    "pm_password":"{{ project_password }}",
                    "pm_addr":"{{ os_auth }}/compute{{ item.item }}"

                },
    with_items: "{{ maccompute.results }}"


# ceph
############

## pxe

  - name: create pxe port for ceph
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: pxe-ceph{{ item }}
       network: "{{ network_pxe }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ ceph_count }}"


  - name: disable security on provisioning nic for ceph
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update pxe-ceph"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ ceph_count }}"


## storage

  - name: create storage port for ceph
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: storage-ceph{{ item }}
       network: "{{ network_storage }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ ceph_count }}"


  - name: disable security on storage nic for ceph
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update storage-ceph"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ ceph_count }}"

## storage mgmt

  - name: create storage mgmt port for ceph
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: storagemgmt-ceph{{ item }}
       network: "{{ network_storagemgmt }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ ceph_count }}"


  - name: disable security on storage mgmt nic for ceph
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update storagemgmt-ceph"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ ceph_count }}"




# Create instackenv.json file to be used by project - Ceph
###############################################



  - name: gather mac addresses for provisioning nic - ceph
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-show pxe-ceph"{{ item }}" | grep mac_address | awk {'print $4'}
    register: macceph
    with_sequence:
       count="{{ ceph_count }}"



  - name: append ceph info
    blockinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      insertafter: EOF
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.stdout }}"
      block: |
        # ceph{{ item.item }}
                {
                    "mac":[
                        "{{ item.stdout }}"
                    ],
                    "cpu":"2",
                    "memory":"4096",
                    "disk":"40",
                    "arch":"x86_64",
                    "pm_type":"pxe_ipmitool",
                    "name":"ceph{{ item.item }}",
                    "capabilities": "profile:ceph-storage",
                    "pm_user":"{{ project_name }}",
                    "pm_password":"{{ project_password }}",
                    "pm_addr":"{{ os_auth }}/ceph{{ item.item }}"

                },
    with_items: "{{ macceph.results }}"



# hci
############

## pxe

  - name: create pxe port for hci
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: pxe-hci{{ item }}
       network: "{{ network_pxe }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ hci_count }}"


  - name: disable security on provisioning nic for hci
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update pxe-hci"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ hci_count }}"

## internal api 

  - name: create internal api port for hci
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: intapi-hci{{ item }}
       network: "{{ network_intapi }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ hci_count }}"


  - name: disable security on Internal API nic for hci
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update intapi-hci"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ hci_count }}"


## tenant


  - name: create tenant port for hci
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: tenant-hci{{ item }}
       network: "{{ network_tenant }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ hci_count }}"


  - name: disable security on tenant nic for hci
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update tenant-hci"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ hci_count }}"



## storage

  - name: create storage port for hci
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: storage-hci{{ item }}
       network: "{{ network_storage }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ hci_count }}"


  - name: disable security on storage nic for hci
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update storage-hci"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ hci_count }}"

## storage mgmt

  - name: create storage mgmt port for hci
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: storagemgmt-hci{{ item }}
       network: "{{ network_storagemgmt }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ hci_count }}"


  - name: disable security on storage mgmt nic for hci
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update storagemgmt-hci"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ hci_count }}"




# Create instackenv.json file to be used by project - hci
###############################################



  - name: gather mac addresses for provisioning nic - hci
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-show pxe-hci"{{ item }}" | grep mac_address | awk {'print $4'}
    register: machci
    with_sequence:
       count="{{ hci_count }}"



  - name: append hci info
    blockinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      insertafter: EOF
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.stdout }}"
      block: |
        # hci{{ item.item }}
                {
                    "mac":[
                        "{{ item.stdout }}"
                    ],
                    "cpu":"2",
                    "memory":"4096",
                    "disk":"40",
                    "arch":"x86_64",
                    "pm_type":"pxe_ipmitool",
                    "name":"hci{{ item.item }}",
                    "capabilities": "profile:compute",
                    "pm_user":"{{ project_name }}",
                    "pm_password":"{{ project_password }}",
                    "pm_addr":"{{ os_auth }}/hci{{ item.item }}"

                },
    with_items: "{{ machci.results }}"






# Finish up the instackenv.json file
##############################



  - name: remove last line with comma
    lineinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      state: present
      regexp: ','
      line: ''
  
  - name: finish instackenv.json file
    blockinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      create: yes
      insertafter: EOF      
      marker: "# {mark} ANSIBLE MANAGED BLOCK END"
      block: |
        # finish
                }
            ]
        }

  - name: remove all the comments
    lineinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      state: absent
      regexp: '^#'

